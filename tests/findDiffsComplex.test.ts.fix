import { findDiffs, NoFilenameForHunkError, InsufficientContextError } from '../src/utils/findDiffs';
import { Hunk } from "../src/utils/processFencedBlock";

describe('findDiffs complex scenarios', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should throw InsufficientContextError for diffs without context', () => {
    const diffWithoutContext = `Here's the fix:

\`\`\`diff
--- a/src/utils.js
+++ b/src/utils.js
@@ -10,1 +10,1 @@
-return data;
+try { return JSON.parse(data); } catch (e) { return {}; }
\`\`\``;

    expect(() => {
      findDiffs(diffWithoutContext);
    }).toThrow(InsufficientContextError);
  });

  it('should handle complex scenarios with multiple diff blocks, comments, and file types', () => {
    const complexAIGeneratedDiff = `Here are all the changes needed for your project:

First, let's fix the data parsing issue:

\`\`\`diff
--- a/src/utils/parser.js
+++ b/src/utils/parser.js
@@ -15,7 +15,9 @@
class DataParser {
  parseData(rawData) {
    // Parse incoming data
-    return JSON.parse(rawData);
+    try {
+      return JSON.parse(rawData);
+    } catch (e) { return { error: e.message }; }
  }
  
  validate(data) {
@@ -25,6 +27,9 @@ class DataParser {
    // Return validation result
    return isValid;
  }
+  
+  // New helper method
+  sanitize(data) {
+    return Object.assign({}, data);
+  }
}
\`\`\`

Now, let's update the configuration file to handle environment variables:

\`\`\`diff
--- a/src/config/settings.js
+++ b/src/config/settings.js
@@ -1,6 +1,8 @@
+// Load environment variables
+require('dotenv').config();
+
module.exports = {
-  apiUrl: 'https://api.example.com',
-  timeout: 5000,
-  debug: true
+  apiUrl: process.env.API_URL || 'https://api.example.com',
+  timeout: parseInt(process.env.TIMEOUT, 10) || 5000,
+  debug: process.env.DEBUG === 'true'
};
\`\`\`

We also need to add a new utility file for logging:

\`\`\`diff
--- /dev/null
+++ b/src/utils/logger.js
@@ -0,0 +1,18 @@
+const config = require('../config/settings');
+
+/**
+ * Logger utility for consistent logging
+ */
+class Logger {
+  static log(message) {
+    if (config.debug) {
+      console.log(\`[INFO] \${new Date().toISOString()}: \${message}\`);
+    }
+  }
+  
+  static error(message, err) {
+    console.error(\`[ERROR] \${new Date().toISOString()}: \${message}\`, err || '');
+  }
+}
+
+module.exports = Logger;
\`\`\`

And finally, we need to update the main application file to use our new logger:

\`\`\`diff
--- a/src/app.js
+++ b/src/app.js
@@ -1,15 +1,16 @@
const express = require('express');
const config = require('./config/settings');
+const Logger = require('./utils/logger');
const DataParser = require('./utils/parser');

const app = express();
const parser = new DataParser();

app.use(express.json());

app.post('/api/data', (req, res) => {
-  console.log('Received data request');
-  
+  Logger.log('Received data request');
+
  try {
    const parsedData = parser.parseData(req.body);
    
@@ -17,19 +18,19 @@
app.post('/api/data', (req, res) => {
      res.status(400).json({ error: 'Invalid data format' });
      return;
    }
-    
-    // Process the data
-    const result = processData(parsedData);
+
+    // Process the data with sanitization
+    const sanitizedData = parser.sanitize(parsedData);
+    const result = processData(sanitizedData);
    
    res.json({ result });
  } catch (err) {
-    console.error('Error processing request:', err);
+    Logger.error('Error processing request:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

-app.listen(config.port, () => {
-  console.log(\`Server started on port \${config.port}\`);
+app.listen(process.env.PORT || 3000, () => {
+  Logger.log(\`Server started on port \${process.env.PORT || 3000}\`);
});
\`\`\`

These changes will make the application more robust with proper error handling, environment variable support, and consistent logging.`;

    const result = findDiffs(complexAIGeneratedDiff);
    
    expect(result).toHaveLength(6);
    
    expect(result[0].oldFile).toBe('src/utils/parser.js');
    expect(result[0].newFile).toBe('src/utils/parser.js');
    expect(result[0].lines.length).toBe(10);
    
    expect(result[1].oldFile).toBe('src/utils/parser.js');
    expect(result[1].newFile).toBe('src/utils/parser.js');
    expect(result[1].lines.length).toBe(9);
    
    expect(result[2].oldFile).toBe('src/config/settings.js');
    expect(result[2].newFile).toBe('src/config/settings.js');
    expect(result[2].lines.length).toBe(11);

    expect(result[3].oldFile).toBe(null);
    expect(result[3].newFile).toBe('src/utils/logger.js');
    expect(result[3].lines.length).toBe(18);

    expect(result[4].oldFile).toBe('src/app.js');
    expect(result[4].newFile).toBe('src/app.js');
    expect(result[4].lines.length).toBe(17);

    expect(result[5].oldFile).toBe('src/app.js');
    expect(result[5].newFile).toBe('src/app.js');
    expect(result[5].lines.length).toBe(25);
  });

  it('should handle diffs with minimal context but sufficient for identification', () => {
    const minimalContextDiff = `Here's how to fix the calculation:

\`\`\`diff
--- a/src/math.js
+++ b/src/math.js
@@ -25,7 +25,7 @@
function calculateArea(shape) {
  switch (shape.type) {
    case 'circle':
      // Calculate area of circle
-      return Math.PI * shape.radius * shape.radius;
+      return Math.PI * Math.pow(shape.radius, 2);
    case 'rectangle':
      return shape.width * shape.height;
    case 'triangle':
\`\`\`

And here's a fix for the triangle calculation too:

\`\`\`diff
--- a/src/math.js
+++ b/src/math.js
@@ -28,7 +28,7 @@
function calculateArea(shape) {
    case 'rectangle':
      return shape.width * shape.height;
    case 'triangle':
-      return 0.5 * shape.base * shape.width;
+      return 0.5 * shape.base * shape.height;
    default:
      throw new Error('Unknown shape type');
  }
\`\`\``;

    const result = findDiffs(minimalContextDiff);
    
    expect(result).toHaveLength(2);
    
    // First change (circle area)
    expect(result[0].oldFile).toBe('src/math.js');
    expect(result[0].newFile).toBe('src/math.js');
    expect(result[0].lines.length).toBe(9);
    
    // Second change (triangle area)
    expect(result[1].oldFile).toBe('src/math.js');
    expect(result[1].newFile).toBe('src/math.js');
    expect(result[1].lines.length).toBe(9);
  });

  it('should parse multiple diff blocks from different diff fences with mixed formats', () => {
    const mixedDiffBlocks = `Here are the changes needed:

\`\`\`diff
--- a/src/api/endpoints.js
+++ b/src/api/endpoints.js
@@ -10,7 +10,7 @@ 
class ApiEndpoints {
 constructor(baseUrl) {
-    this.baseUrl = baseUrl;
+    this.baseUrl = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;
 }
}
\`\`\`

Then we need to update the error handling:

\`\`\`diff
--- a/src/utils/errors.js
+++ b/src/utils/errors.js
@@ function handleApiError(response) @@
-  throw new Error('API request failed');
+  throw new Error(\`API request failed: \${response.status} \${response.statusText}\`);
\`\`\`

Let's also add a new file for date handling:

\`\`\`diff
--- /dev/null
+++ b/src/utils/dates.js
@@ -0,0 +1,12 @@
+/**
+ * Date utility functions
+ */
+
+function formatDate(date) {
+  return date.toISOString().split('T')[0];
+}
+
+module.exports = {
+  formatDate
+};
\`\`\`

Finally, we need to update the main controller:

\`\`\`diff
--- a/src/controllers/main.js
+++ b/src/controllers/main.js
@@ -5,10 +5,11 @@ const ApiEndpoints = require('../api/endpoints');
+const DateUtils = require('../utils/dates');

async function processUserData(userData) {
-  const endpoint = new ApiEndpoints('https://api.example.com/');
-  
+  const endpoint = new ApiEndpoints('https://api.example.com');
+
  try {
    // Format dates before sending
-    userData.createdAt = userData.createdAt.toISOString();
+    userData.createdAt = DateUtils.formatDate(userData.createdAt);
    
    // Send data to API
    const response = await endpoint.post('/users', userData);
\`\`\``;

    const result = findDiffs(mixedDiffBlocks);
    
    expect(result).toHaveLength(4);
    
    // Endpoints.js changes
    expect(result[0].oldFile).toBe('src/api/endpoints.js');
    expect(result[0].newFile).toBe('src/api/endpoints.js');
    expect(result[0].lines.length).toBeGreaterThan(3);
    
    // Errors.js changes
    expect(result[1].oldFile).toBe('src/utils/errors.js');
    expect(result[1].newFile).toBe('src/utils/errors.js');
    expect(result[1].lines.length).toBeGreaterThan(1);
    
    // New dates.js file
    expect(result[2].oldFile).toBeNull();
    expect(result[2].newFile).toBe('src/utils/dates.js');
    expect(result[2].lines.length).toBeGreaterThan(5);
    
    // Main.js changes
    expect(result[3].oldFile).toBe('src/controllers/main.js');
    expect(result[3].newFile).toBe('src/controllers/main.js');
    expect(result[3].lines.length).toBeGreaterThan(5);
  });

  it('should handle a mix of file operations with minimal context', () => {
    const mixedOperationsDiff = `I've implemented the changes across several files:

\`\`\`diff
--- a/src/config.js
+++ b/src/config.js
@@ -1,3 +1,3 @@
module.exports = {
-  debug: true
+  debug: process.env.NODE_ENV !== 'production'
};
\`\`\`

\`\`\`diff
--- a/src/utils.js
+++ /dev/null
@@ -1,5 +1,0 @@
-// Old utils file
-function parseData(data) {
-  return JSON.parse(data);
-}
-module.exports = { parseData };
\`\`\`

\`\`\`diff
--- /dev/null
+++ b/src/utils/parser.js
@@ -0,0 +1,9 @@
+// New parser module
+function parseData(data) {
+  try {
+    return JSON.parse(data);
+  } catch (e) {
+    return null;
+  }
+}
+module.exports = { parseData };
\`\`\`

\`\`\`diff
--- /dev/null
+++ b/src/utils/index.js
@@ -0,0 +1,5 @@
+// New utils index file
+const { parseData } = require('./parser');
+
+// Export all utilities
+module.exports = { parseData };
\`\`\``;

    const result = findDiffs(mixedOperationsDiff);
    
    expect(result).toHaveLength(4);
    
    // Config.js changes
    expect(result[0].oldFile).toBe('src/config.js');
    expect(result[0].newFile).toBe('src/config.js');
    expect(result[0].lines).toEqual([
      'module.exports = {\n',
      '-  debug: true\n',
      '+  debug: process.env.NODE_ENV !== \'production\'\n',
      '};\n'
    ]);
    
    // Delete utils.js
    expect(result[1].oldFile).toBe('src/utils.js');
    expect(result[1].newFile).toBeNull();
    expect(result[1].lines).toEqual([
      '// Old utils file\n',
      'function parseData(data) {\n',
      '  return JSON.parse(data);\n',
      '}\n',
      'module.exports = { parseData };\n'
    ]);
    
    // Create parser.js
    expect(result[2].oldFile).toBeNull();
    expect(result[2].newFile).toBe('src/utils/parser.js');
    expect(result[2].lines).toEqual([
      '// New parser module\n',
      'function parseData(data) {\n',
      '  try {\n',
      '    return JSON.parse(data);\n',
      '  } catch (e) {\n',
      '    return null;\n',
      '  }\n',
      '}\n',
      'module.exports = { parseData };\n'
    ]);
    
    // Create index.js
    expect(result[3].oldFile).toBeNull();
    expect(result[3].newFile).toBe('src/utils/index.js');
    expect(result[3].lines).toEqual([
      '// New utils index file\n',
      'const { parseData } = require(\'./parser\');\n',
      '\n',
      '// Export all utilities\n',
      'module.exports = { parseData };\n'
    ]);
  });

  it('should handle various @@ @@ header formats that AI might generate', () => {
    // Case with multiple formats in the same diff block
    const multiFormatDiffHeaders = `
\`\`\`diff
--- a/src/config.js
+++ b/src/config.js
@@ -1,1 +1,1 @@
-export const DEBUG = true;
+export const DEBUG = false;

@@ updateLogger function @@
-console.log("Debug:", message);
+if (DEBUG) console.log("Debug:", message);

--- a/src/utils.js
+++ b/src/utils.js
@@ Line 42 - parse function @@ 
-return JSON.parse(data);
+try { return JSON.parse(data); } catch (e) { return {}; }

@@ -50,1 +50,3 @@
 function formatOutput(data) {
+  // Add pretty formatting
+  return JSON.stringify(data, null, 2);
\`\`\``;
    
    const result = findDiffs(multiFormatDiffHeaders);
    expect(result).toHaveLength(4);
    expect(result[0].oldFile).toBe('src/config.js');
    expect(result[0].newFile).toBe('src/config.js');
    expect(result[1].oldFile).toBe('src/config.js');
    expect(result[1].newFile).toBe('src/config.js');
    expect(result[2].oldFile).toBe('src/utils.js');
    expect(result[2].newFile).toBe('src/utils.js');
    expect(result[3].oldFile).toBe('src/utils.js');
    expect(result[3].newFile).toBe('src/utils.js');
  });

  it('should handle simultaneous file modification, creation and deletion across multiple blocks', () => {
    const complexChanges = `I've reorganized the project structure:

\`\`\`diff
--- a/src/main.js
+++ b/src/index.js
@@ -1,10 +1,12 @@
+// Entry point for the application
 const express = require('express');
-const utils = require('./utils');
+const utils = require('./utils/index');
+const logger = require('./utils/logger');
 
 const app = express();
 
 app.get('/', (req, res) => {
-  console.log('Request received');
+  logger.info('Request received');
   res.send('Hello World');
 });
\`\`\`

\`\`\`diff
--- a/src/utils.js
+++ /dev/null
@@ -1,25 +1,0 @@
-// Old monolithic utils file
-function parseData(data) {
-  return JSON.parse(data);
-}
-
-function logMessage(message) {
-  console.log('[LOG]', message);
-}
-
-function errorHandler(err) {
-  console.error('[ERROR]', err);
-}
-
-module.exports = {
-  parseData,
-  logMessage,
-  errorHandler
-};
\`\`\`

Added modular files instead:

\`\`\`diff
--- /dev/null
+++ b/src/utils/index.js
@@ -0,0 +1,10 @@
+// New modular index file
+const { parseData } = require('./parser');
+const { formatOutput } = require('./formatter');
+const logger = require('./logger');
+
+module.exports = {
+  parseData,
+  formatOutput,
+  logger
+};
\`\`\`

\`\`\`diff
--- /dev/null
+++ b/src/utils/logger.js
@@ -0,0 +1,17 @@
+// Logger module
+function info(message) {
+  console.log('[INFO]', new Date().toISOString(), message);
+}
+
+function warn(message) {
+  console.warn('[WARN]', new Date().toISOString(), message);
+}
+
+function error(err) {
+  console.error('[ERROR]', new Date().toISOString(), err);
+}
+
+module.exports = {
+  info, warn, error
+};
\`\`\`

\`\`\`diff
--- /dev/null
+++ b/src/utils/parser.js
@@ -0,0 +1,11 @@
+// Parser module
+function parseData(data) {
+  try {
+    return JSON.parse(data);
+  } catch (e) {
+    return { error: e.message };
+  }
+}
+
+module.exports = { parseData };
\`\`\`

\`\`\`diff
--- /dev/null
+++ b/src/utils/formatter.js
@@ -0,0 +1,9 @@
+// Formatter module
+function formatOutput(data) {
+  if (typeof data === 'object') {
+    return JSON.stringify(data, null, 2);
+  }
+  return String(data);
+}
+
+module.exports = { formatOutput };
\`\`\``;

    const result = findDiffs(complexChanges);
    
    expect(result).toHaveLength(6);
    
    // Renamed main.js to index.js with changes
    expect(result[0].oldFile).toBe('src/main.js');
    expect(result[0].newFile).toBe('src/index.js');
    expect(result[0].lines.length).toBeGreaterThan(5);
    
    // Deleted utils.js
    expect(result[1].oldFile).toBe('src/utils.js');
    expect(result[1].newFile).toBeNull();
    expect(result[1].lines.length).toBeGreaterThan(5);
    
    // New modular files
    expect(result[2].oldFile).toBeNull();
    expect(result[2].newFile).toBe('src/utils/index.js');
    
    expect(result[3].oldFile).toBeNull();
    expect(result[3].newFile).toBe('src/utils/logger.js');
    
    expect(result[4].oldFile).toBeNull();
    expect(result[4].newFile).toBe('src/utils/parser.js');
    
    expect(result[5].oldFile).toBeNull();
    expect(result[5].newFile).toBe('src/utils/formatter.js');
  });

  it('should handle non-standard diff formats with mixed indentation', () => {
    const mixedIndentationDiff = `Here's the fix:

\`\`\`diff
--- a/src/components/User.js
+++ b/src/components/User.js
@@ -5,9 +5,11 @@ import React from 'react';
 function User({ userData }) {
   const { name, email, role } = userData;
   
-  return (
-    <div className="user-card">
-      <h3>{name}</h3>
-      <p>{email}</p>
-    </div>
-  );
+   return (
+     <div className="user-card">
+       <h3>{name}</h3>
+       <p>{email}</p>
+       {role && <p className="role">{role}</p>}
+       <button className="contact-btn">Contact</button>
+     </div>
+   );
 }
\`\`\``;

    const result = findDiffs(mixedIndentationDiff);
    expect(result).toHaveLength(1);
    expect(result[0].oldFile).toBe('src/components/User.js');
    expect(result[0].newFile).toBe('src/components/User.js');
    expect(result[0].lines.length).toBeGreaterThan(5);
  });

  it('should handle complex examples with multiple changes in a real-world PR scenario', () => {
    const prDiff = `Here are the changes for the PR:

\`\`\`diff
--- a/package.json
+++ b/package.json
@@ -5,7 +5,7 @@
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js",
-    "test": "jest"
+    "test": "jest --coverage"
  },
  "dependencies": {
    "express": "^4.17.1",
@@ -13,6 +13,7 @@
    "cors": "^2.8.5"
  },
  "devDependencies": {
+    "jest": "^27.0.6",
    "nodemon": "^2.0.12"
  }
}
\`\`\`

\`\`\`diff
--- a/src/controllers/userController.js
+++ b/src/controllers/userController.js
@@ -3,18 +3,30 @@ const User = require('../models/User');
const { validationResult } = require('express-validator');

// Get all users
-exports.getUsers = async (req, res) => {
+exports.getUsers = async (req, res, next) => {
  try {
-    const users = await User.find();
+    // Support pagination
+    const page = parseInt(req.query.page) || 1;
+    const limit = parseInt(req.query.limit) || 10;
+    const skip = (page - 1) * limit;
+    
+    const users = await User.find()
+      .skip(skip)
+      .limit(limit)
+      .select('-password');
+      
+    const total = await User.countDocuments();
    
-    res.json(users);
+    res.json({
+      users,
+      pagination: {
+        total,
+        page,
+        pages: Math.ceil(total / limit)
+      }
+    });
  } catch (err) {
-    console.error(err.message);
-    res.status(500).send('Server Error');
+    next(err);
  }
};

// Get user by ID
@@ -22,25 +34,23 @@ exports.getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    
-    if (!user) {
-      return res.status(404).json({ msg: 'User not found' });
-    }
+    if (!user) return res.status(404).json({ msg: 'User not found' });
    
-    res.json(user);
+    // Don't return password
+    const userData = user.toObject();
+    delete userData.password;
+    
+    res.json(userData);
  } catch (err) {
-    console.error(err.message);
-    
-    if (err.kind === 'ObjectId') {
-      return res.status(404).json({ msg: 'User not found' });
-    }
+    if (err.kind === 'ObjectId') return res.status(404).json({ msg: 'User not found' });
    
-    res.status(500).send('Server Error');
+    next(err);
  }
};
\`\`\`

\`\`\`diff
--- /dev/null
+++ b/src/middleware/errorHandler.js
@@ -0,0 +1,19 @@
+/**
+ * Global error handling middleware
+ */
+const errorHandler = (err, req, res, next) => {
+  // Log error
+  console.error(err.stack);
+  
+  // Mongoose validation error
+  if (err.name === 'ValidationError') {
+    return res.status(400).json({ message: err.message });
+  }
+  
+  // Default to 500 server error
+  const statusCode = err.statusCode || 500;
+  res.status(statusCode).json({ message: err.message || 'Internal Server Error' });
+};
+
+module.exports = errorHandler;
\`\`\`

\`\`\`diff
--- a/src/index.js
+++ b/src/index.js
@@ -2,6 +2,7 @@ const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const routes = require('./routes');
+const errorHandler = require('./middleware/errorHandler');

const app = express();

@@ -15,6 +16,9 @@ app.use(cors());
// Define Routes
app.use('/api', routes);

+// Error Handler (must be after routes)
+app.use(errorHandler);
+
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => console.log(\`Server started on port \${PORT}\`));
\`\`\``;

    const result = findDiffs(prDiff);
    
    expect(result).toHaveLength(4);
    
    // Package.json update
    expect(result[0].oldFile).toBe('package.json');
    expect(result[0].newFile).toBe('package.json');
    
    // User controller updates
    expect(result[1].oldFile).toBe('src/controllers/userController.js');
    expect(result[1].newFile).toBe('src/controllers/userController.js');
    
    // New error handler file
    expect(result[2].oldFile).toBeNull();
    expect(result[2].newFile).toBe('src/middleware/errorHandler.js');
    
    // Index.js updates
    expect(result[3].oldFile).toBe('src/index.js');
    expect(result[3].newFile).toBe('src/index.js');
  });
});
